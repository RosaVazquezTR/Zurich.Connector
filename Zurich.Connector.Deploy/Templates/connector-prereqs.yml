parameters:
  - name: apimName
    type: string
  - name: apimResourceGroup
    type: string
  - name: appInsightsName
    type: string
  - name: availabilityAlertGroups
    type: string
  - name: azureAdClientId
    type: string
  - name: azureAdClientSecret
    type: string
  - name: databaseName
    type: string
  - name: databaseServerName
    type: string
  - name: defaultCapacity
    type: string
  - name: developerActionGroupName
    type: string
  - name: developerEmailAddress
    type: string
  - name: developerEmailName
    type: string
  - name: environmentName
    type: string
  - name: environmentType
    type: string
  - name: flowWebhook
    type: string
  - name: flowWebhookName
    type: string
  - name: highqMSKey
    type: string
  - name: keyVault
    type: string
  - name: keyVaultSubnets
    type: string
  - name: legalHomeDbUser
    type: string
  - name: legalHomeDbUserPassword
    type: string
  - name: legalTrackerSecret
    type: string
  - name: legalTrackerActionItemsSecret
    type: string
  - name: ltioL1ActionGroupName
    type: string
  - name: ltioL1EmailAddress
    type: string
  - name: ltioL1EmailName
    type: string
  - name: ltioL2ActionGroupName
    type: string
  - name: ltioL2EmailAddress
    type: string
  - name: ltioL2EmailName
    type: string
  - name: minimumCapacity
    type: string
  - name: maximumCapacity
    type: string
  - name: notificationEmailGroup
    type: string
  - name: practicalLawSecret
    type: string
  - name: resourceGroup
    type: string
  - name: resourceLocation
    type: string
  - name: resourceOwner
    type: string
  - name: routeTableName
    type: string
  - name: connectorServiceName
    type: string
  - name: smartDetectionRuleNames
    type: string
  - name: splitIOApiKey
    type: string
  - name: subnetPreFix
    type: string
  - name: subnetConnectorBackend
    type: string
  - name: subnetFunctionBackend
    type: string
  - name: subscriptionId
    type: string
  - name: subscriptionName
    type: string
  - name: tagNames
    type: string
  - name: tenantDbConnStringKey
    type: string
  - name: vnetName
    type: string
  - name: vnetResourceGroup
    type: string
  - name: webDnsServer
    type: string
  - name: westlawUKSecret
    type: string
  - name: asposeLicence
    type: string

steps:
  - template: Templates\ZurichDeploy-SetupResourceGroup.yml@ZurichDeploy
    parameters:
      environmentName: '${{ parameters.environmentName }}'
      environmentType: '${{ parameters.environmentType }}'
      resourceGroup: '${{ parameters.resourceGroup }}'
      resourceLocation: '${{ parameters.resourceLocation }}'
      resourceOwner: '${{ parameters.resourceOwner }}'
      subscriptionId: '${{ parameters.subscriptionId }}'
      subscriptionName: '${{ parameters.subscriptionName }}'
      tagNames: '${{ parameters.tagNames }}'

  - template: Templates\ZurichDeploy-SetupAppInsights.yml@ZurichDeploy
    parameters:
      appInsightsName: ${{ parameters.appInsightsName }}
      availabilityAlertGroups: ${{ parameters.availabilityAlertGroups }}
      developerActionGroupName: ${{ parameters.developerActionGroupName }}
      developerEmailAddress: ${{ parameters.developerEmailAddress }}
      developerEmailName: ${{ parameters.developerEmailName }}
      environmentName: ${{ parameters.environmentName }}
      flowWebhook: ${{ parameters.flowWebhook }}
      flowWebhookName: ${{ parameters.flowWebhookName }}
      ltioL1ActionGroupName: ${{parameters.ltioL1ActionGroupName}}
      ltioL1EmailAddress: ${{ parameters.ltioL1EmailAddress }}
      ltioL1EmailName: ${{ parameters.ltioL1EmailName }}
      ltioL2ActionGroupName: ${{ parameters.ltioL2ActionGroupName }}
      ltioL2EmailAddress: ${{ parameters.ltioL2EmailAddress }}
      ltioL2EmailName: ${{ parameters.ltioL2EmailName }}
      notificationEmailGroup: ${{ parameters.notificationEmailGroup }}
      resourceGroup: ${{ parameters.resourceGroup }}
      resourceLocation: ${{ parameters.resourceLocation }}
      smartDetectionRuleNames: ${{ parameters.smartDetectionRuleNames }}
      subscriptionId: ${{ parameters.subscriptionId }}
      subscriptionName: ${{ parameters.subscriptionName }}
  - task: AzurePowerShell@5
    displayName: 'Create SubNet and NSG'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      azurePowerShellVersion: 'LatestVersion'
      ScriptType: 'InlineScript'
      Inline: |
        Import-Module  -Name "$(Build.SourcesDirectory)/Zurich.Deploy/Scripts/V2/AddSubnetandNSG.psm1"

        $subnets = @(${{ parameters.subnetConnectorBackend }}, ${{ parameters.subnetFunctionBackend }})

        Add-SubNets -removeDelegations $true -CleanupOldNsgs $true -ResourceGroup "${{ parameters.vnetResourceGroup }}" -nsgResourceGroup "${{ parameters.resourceGroup }}" -subnetPreFix "${{ parameters.subnetPreFix }}" -env "${{ parameters.environmentName }}" -Location "${{ parameters.resourceLocation }}" -RouteTableName "${{ parameters.routeTableName }}" -VirtualNetworkName "${{ parameters.vnetName }}" -subNets $subNets -armTemplateFolderLocation "$(Build.SourcesDirectory)/Zurich.Deploy/ArmTemplates"
  - task: AzurePowerShell@5
    displayName: 'Get Apim IP'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      ScriptType: 'InlineScript'
      Inline: |
        . $(Build.SourcesDirectory)/Zurich.Deploy/Scripts/Common.ps1
        $apimIps = @(Get-APIManagementPublicIps -ResourceGroup "${{ parameters.apimResourceGroup }}" -Environment "${{ parameters.environmentName }}" -ApimName "${{ parameters.apimName }}")
        $apimIp = $apimIps | Select-Object -first 1

        Write-Host  "##vso[task.setvariable variable=apimIp;isSecret=false]$apimIp"
      azurePowerShellVersion: 'LatestVersion'
  - template: Templates\V4\ZurichDeploy-AzureAppService.yml@ZurichDeploy
    parameters:
      appInsightsName: ${{ parameters.appInsightsName }}
      appGatewayIp: $(apimIp)
      environmentName: ${{ parameters.environmentName }}
      appServiceName: ${{ parameters.connectorServiceName }}
      appServiceSubnet: ${{ parameters.subnetConnectorBackend}}
      defaultCapacity: ${{ parameters.defaultCapacity}}
      minimumCapacity: ${{ parameters.minimumCapacity}}
      maximumCapacity: ${{ parameters.maximumCapacity}}
      resourceGroup: ${{ parameters.resourceGroup }}
      resourceLocation: '${{ parameters.resourceLocation }}'
      subnetPreFix: ${{ parameters.subnetPrefix }}
      subscriptionName: ${{ parameters.subscriptionName }}
      vnetName: ${{ parameters.vnetName }}
      webDnsServer: ${{ parameters.webDnsServer}}

  - task: AzurePowerShell@4
    displayName: 'Create Key Vault'
    inputs:
      azureSubscription: ${{ parameters.subscriptionName }}
      ScriptPath: '$(Build.SourcesDirectory)/Zurich.Deploy/Scripts/SetupKeyVault.ps1'
      ScriptArguments: '-resourceGroupName "${{ parameters.resourceGroup }}" -envName "${{ parameters.environmentName }}" -appId "${{ parameters.azureAdClientId }}" -vaultName "${{ parameters.keyVault }}" -vnetName "${{ parameters.vnetName }}" -vnetResourceGroupName "${{ parameters.vnetResourceGroup }}" -subNets ${{ parameters.keyVaultSubnets }} -verbose '
      azurePowerShellVersion: LatestVersion

  - task: AzurePowerShell@4
    displayName: 'Grant KeyVault Access for App'
    inputs:
      azureSubscription: ${{ parameters.subscriptionName }}
      ScriptPath: '$(Build.SourcesDirectory)/Zurich.Deploy/Scripts/GrantAppAccessToKeyVault.ps1'
      ScriptArguments: '-resourceGroupName "${{ parameters.resourceGroup }}" -keyVaultName "${{ parameters.keyVault }}" -environmentName "${{ parameters.environmentName }}" -appName "${{ parameters.connectorServiceName }}"'
      azurePowerShellVersion: LatestVersion

  - task: AzurePowerShell@4
    displayName: 'Populate Key Vault'
    inputs:
      azureSubscription: ${{ parameters.subscriptionName }}
      ScriptPath: '$(Build.SourcesDirectory)/Zurich.Deploy/Scripts/PopulateKeyVault.ps1'
      ScriptArguments: '-vaultName "${{ parameters.keyVault }}${{ parameters.environmentName }}" -nameValuePairsJson ''{"AzureAd--ClientId": "${{ parameters.azureAdClientId }}", "SplitIOApiKey":"${{ parameters.splitIOApiKey }}", "PartnerOAuthApps--Connections--PracticalLaw--Secret": "${{ parameters.practicalLawSecret }}", "PartnerOAuthApps--Connections--PLCUS--Secret": "${{ parameters.practicalLawSecret }}", "PartnerOAuthApps--Connections--PLCUK--Secret": "${{ parameters.practicalLawSecret }}", "PartnerOAuthApps--Connections--PLCCA--Secret": "${{ parameters.practicalLawSecret }}", "PartnerOAuthApps--Connections--PLCAU--Secret": "${{ parameters.practicalLawSecret }}", "PartnerOAuthApps--Connections--CBTPRACPT--Secret": "${{ parameters.practicalLawSecret }}", "PartnerOAuthApps--Connections--PracticalLawConnect--Secret": "${{ parameters.practicalLawSecret }}", "PartnerOAuthApps--Connections--TRACKR--Secret": "${{ parameters.legalTrackerSecret }}", "PartnerOAuthApps--Connections--TRACKRACTIONITEMS--Secret": "${{ parameters.legalTrackerActionItemsSecret }}", "PartnerOAuthApps--Connections--WLUK--Secret": "${{ parameters.westlawUKSecret }}", "HighqMS--Key": "${{ parameters.highqMSKey }}", "AsposeLicence": "${{ parameters.asposeLicence }}" }'''
      azurePowerShellVersion: LatestVersion

  # this can eventually get removed when we no longer need to go directly to db to get tokens

  - task: AzurePowerShell@4
    displayName: 'Add tenant connection string to keyvault'
    inputs:
      azureSubscription: ${{ parameters.subscriptionName }}
      ScriptPath: '$(Build.SourcesDirectory)/Zurich.Connector/Zurich.Connector.Deploy/Scripts/AddConnectionStringToKeyvault.ps1'
      ScriptArguments: '-resourceGroup "${{ parameters.resourceGroup }}" -vaultName "${{ parameters.keyVault }}${{ parameters.environmentName }}" -databaseServerName "${{ parameters.databaseServerName}}" -databaseName "${{ parameters.databaseName }}" -databaseUserName "${{ parameters.legalHomeDbUser }}" -databaseUserPassword "${{ parameters.legalHomeDbUserPassword }}" -environment "${{ parameters.environmentName }}" -keyName "${{ parameters.tenantDbConnStringKey}}" -alwaysEncrypted "true" -verbose'
      azurePowerShellVersion: LatestVersion
