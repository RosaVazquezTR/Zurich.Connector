# ASP.NET Core (.NET Framework)

# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger: none

pool:
  vmImage: 'windows-latest'

resources:
  repositories:
    - repository: ZurichDeploy
      type: git
      name: Zurich.Deploy
    - repository: ZurichTesting
      type: git
      name: Zurich.Testing
      
variables:
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- template: Variables\ZurichDeploy-variables-Shared.yml@ZurichDeploy
- template: Variables\ZurichDeploy-variables-Prod.yml@ZurichDeploy
- template: ../Variables/connector-variables-Shared.yml   
- template: ../Variables/connector-variables-Prod.yml

# build number in format of Zurich-Connector.dev.20200204.1
name: $(BuildDefinitionName).$(SourceBranchName).$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Build
  # Change pool back to DCO-HighQ-Platform-P once build machines are fixed
  pool: 
    vmImage: 'windows-latest'
  jobs:
    - job: 'Build'
      displayName: 'Connectors Build'
      steps:
        - checkout: self
        - checkout: ZurichDeploy
        - template: Templates\V2\ZurichDeploy-BuildWebAPI.yml@ZurichDeploy
          parameters:
            azureAdClientSecret: $(azureAdClientSecret)
            environmentName: prod
            projectName: ${{ variables.projectName }}
            publishWebProjects: false
- stage: ServiceNow
  pool: DCO-HighQ-Platform-P
  dependsOn:
  - Build
  jobs:
  - deployment: ServiceNow
    environment: Prod_L2
    strategy:
     runOnce:
       deploy:
         steps:
         - download: none
         - checkout: self
         - checkout: ZurichDeploy
         - template: Templates/ZurichDeploy-NotifyBuildOwners.yml@ZurichDeploy
           parameters:
             additionalEmails: ${{ variables.additionalEmailsForServiceNowRequest }}
             applicationName: ${{ variables.applicationName }}
             assignmentGroup: "${{ variables.assignmentGroup }}"
             environmentName: ${{ variables.environmentName }}
             serviceNowUserName: ${{ variables.serviceNowUserName }}
             serviceNowPassword: "$(serviceNowPassword)"
             subscriptionName: ${{ variables.subscriptionName }}
- stage: Prod
  pool: DCO-HighQ-Platform-P
  dependsOn:
    - ServiceNow
  jobs:
    - deployment: Prereqs
      environment: Prod
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - checkout: ZurichDeploy
              - template: ../Templates/connector-prereqs.yml
                parameters:
                  apimName: ${{ variables.apimName }}
                  apimResourceGroup: ${{ variables.apimResourceGroup }}
                  appInsightsName: ${{ variables.appInsightsName }}
                  availabilityAlertGroups: ${{ variables.availabilityAlertGroups }}
                  azureAdClientId: ${{ variables.azureAdClientId }}
                  azureAdClientSecret: $(azureAdClientSecret)
                  databaseName: ${{ variables.databaseName }}
                  databaseServerName: ${{ variables.databaseServerName }}
                  developerActionGroupName: ${{ variables.developerActionGroupName }}
                  developerEmailAddress: ${{ variables.developerEmailAddress }}
                  developerEmailName: ${{ variables.developerEmailName }}
                  environmentName: ${{ variables.environmentName }}
                  environmentType: ${{ variables.environmentType }}
                  flowWebhook: ${{ variables.flowWebhook }}
                  flowWebhookName: ${{ variables.flowWebhookName }}
                  keyVault: ${{ variables.keyVault }}
                  keyVaultSubnets: ${{ variables.keyVaultSubnets }}
                  legalHomeDbUser: ${{ variables.legalHomeDbUser }}
                  legalHomeDbUserPassword: $(legalHomeDbUserPassword)
                  legalTrackerSecret : $(legalTrackerSecret)
                  ltioL1ActionGroupName: ${{variables.ltioL1ActionGroupName}}
                  ltioL1EmailAddress: ${{variables.ltioL1EmailAddress}}
                  ltioL1EmailName: ${{variables.ltioL1EmailName}}
                  ltioL2ActionGroupName: ${{variables.ltioL2ActionGroupName}}
                  ltioL2EmailAddress: ${{variables.ltioL2EmailAddress}}
                  ltioL2EmailName: ${{variables.ltioL2EmailName}}
                  notificationEmailGroup: ${{ variables.notificationEmailGroup }}
                  practicalLawSecret: $(practicalLawSecret)
                  resourceGroup: ${{ variables.resourceGroup }}
                  resourceLocation: ${{ variables.resourceLocation }}
                  resourceOwner: ${{ variables.resourceOwner }}
                  routeTableName: ${{ variables.routeTableName }}
                  connectorServiceName: ${{ variables.connectorServiceName }}
                  smartDetectionRuleNames: ${{ variables.smartDetectionRuleNames }}
                  subnetPreFix: ${{ variables.subnetPreFix }}
                  subnetConnectorBackend: ${{ variables.subnetConnectorBackend }}
                  subnetFunctionBackend: ${{ variables.subnetFunctionBackend }}
                  subscriptionId: ${{ variables.subscriptionId }}
                  subscriptionName: ${{ variables.subscriptionName }}
                  tagNames: ${{ variables.tagNames }}
                  tenantDbConnStringKey: ${{ variables.tenantDbConnStringKey }}
                  vnetName: ${{ variables.vnetName }}
                  vnetResourceGroup: ${{ variables.vnetResourceGroup }}
                  webDnsServer: ${{ variables.webDnsServer }}

    - deployment: Connector
      environment: Prod
      dependsOn: Prereqs
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - checkout: ZurichDeploy
              - template: ../Templates/connector-deploy.yml
                parameters:
                  appInsightsName: ${{ variables.appInsightsName }}
                  connectorCosmosContainerNames: ${{ variables.connectorCosmosContainerNames }}
                  connectorCosmosExcludedComparisonProperties: ${{ variables.connectorCosmosExcludedComparisonProperties }}
                  connectorCosmosThroughput: ${{ variables.connectorCosmosThroughput }}
                  connectorCosmosMaxThroughput: ${{ variables.connectorCosmosMaxThroughput }}
                  connectorCosmosDatabaseName: ${{ variables.connectorCosmosDatabaseName }}
                  connectorCosmosName: ${{ variables.connectorCosmosName }}
                  connectorCosmosPartitionPath: ${{ variables.connectorCosmosPartitionPath }}
                  connectorCosmosShouldAutoScale: ${{ variables.connectorCosmosShouldAutoScale }}
                  connectorCosmoskeyVaultPrefix: ${{ variables.connectorCosmoskeyVaultPrefix }}
                  connectorServiceName: ${{ variables.connectorServiceName }}
                  deployArmTemplates: ${{ variables.deployArmTemplates }}
                  deployScriptFolder: ${{ variables.deployScriptFolder }}
                  environmentName: ${{ variables.environmentName }}
                  keyVault: '${{ variables.keyVault }}'
                  moduleFolder: ${{ variables.moduleFolder }}
                  monitorAlertGroups: ${{ variables.monitorAlertGroups }}
                  monitorAlertPrefix: ${{ variables.monitorAlertPrefix }}
                  projectName: '${{ variables.projectName }}'
                  resourceGroup: ${{ variables.resourceGroup }}
                  resourceLocation: ${{ variables.resourceLocation }}
                  retentionDays: ${{ variables.retentionDays }}
                  connectorSubnets: ${{ variables.connectorSubnets }}
                  serviceConnectionName: ${{ variables.serviceConnectionName }}
                  slotName: ${{ variables.slotName }}
                  storageResourceGroup: ${{ variables.monitoringResourceGroup }}
                  subscriptionName: ${{ variables.subscriptionName }}
                  storageLoggingName: ${{ variables.storageLoggingName }}
                  subscriptionId: ${{ variables.subscriptionId }}
                  subnetPrefix: ${{ variables.subnetPrefix }}
                  tlsVersion: ${{ variables.tlsVersion }}
                  vnetName: ${{ variables.vnetName }}
                  vnetResourceGroup: ${{ variables.vnetResourceGroup }}
    - deployment: DurableFunction
      environment: CI
      dependsOn: Prereqs
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - checkout: ZurichDeploy
              - template: Templates\ZurichDeploy-FunctionDeploy.yml@ZurichDeploy
                parameters:
                    allowedIps: "[]"
                    allowedSubnets: ${{ variables.functionSubnets }}
                    appInsightsName: ${{ variables.appInsightsName }}
                    appServicePlanName: ${{ variables.functionAppServicePlanName }}
                    appServicePlanSku: ${{ variables.functionAppServicePlanSku }}
                    armFolder: ${{ variables.deployArmTemplates }}
                    cosmosName: ${{ variables.connectorCosmosName }}
                    cosmosResourceGroup: ${{ variables.resourceGroup }}
                    deployScriptFolder: ${{ variables.deployScriptFolder }}
                    environmentName: ${{ variables.environmentName }}
                    functionArmTemplate: ${{ variables.functionArmTemplate }}
                    functionName: ${{ variables.functionName }}
                    functionNamePrefix: ${{ variables.functionNamePrefix }}
                    functionPrefix: ''
                    functionStorageName: ${{ variables.functionStorageName }}
                    functionVersion: ${{ variables.functionVersion }}
                    keyVault: ${{ variables.keyVault }}
                    monitorAlertGroups: ${{ variables.monitorAlertGroups }}
                    monitorAlertPrefix: ${{ variables.monitorAlertPrefix }}
                    monitoringResourceGroup: ${{ variables.monitoringResourceGroup }}
                    resourceGroup: ${{ variables.resourceGroup }}
                    resourceLocation: ${{ variables.resourceLocation }}
                    retentionDays: ${{ variables.retentionDays }}
                    scriptFolder: ${{ variables.deployScriptFolder }}
                    slotName: ${{ variables.slotName }}
                    storageLoggingName: ${{ variables.storageLoggingName }}
                    subnetPrefix: ${{ variables.subnetPrefix }}
                    subnetFunctionBackend: ${{ variables.subnetFunctionBackend }}
                    subscriptionId: ${{ variables.subscriptionId }}
                    subscriptionName: ${{ variables.subscriptionName }}
                    useOneAppServicePlan: "false"
                    webDnsServer: ${{ variables.webDnsServer }}
                    vnetName: ${{ variables.vnetName }}
                    vnetResourceGroup: ${{ variables.vnetResourceGroup }}
                    zipFileLocation: ${{ variables.functionZipLocation }}
- stage: Swap_Slots
  dependsOn: Prod
  jobs:
    - template: ../Templates/connector-swap-slots.yml
      parameters:
        environmentName: ${{ variables.environmentName }}
        resourceGroup: ${{ variables.resourceGroup }}
        connectorServiceName: ${{ variables.connectorServiceName }}
        slotName: ${{ variables.slotName }}
        subscriptionName: ${{ variables.subscriptionName }}
- stage: Update_APIM_Product
  dependsOn: Swap_Slots
  jobs:
  - job: 'UpdateApim'
    displayName: 'Update Apim Connector Service'
    steps:
      - checkout: self
      - checkout: ZurichDeploy
      - template: Templates\ZurichDeploy-SetupApimProduct.yml@ZurichDeploy
        parameters:
          apiId: ${{ variables.apiId }}
          apimAppInsightsName: ${{ variables.apimAppInsightsName }}
          apimName: ${{ variables.apimName }}
          apimProductPolicyFilePath: $(Build.SourcesDirectory)/Zurich.Connector.Deploy/Config/${{variables.environmentName}}/ConnectorAPIMPolicy.xml
          apimResourceGroup: ${{ variables.apimResourceGroup }}
          apimResourceLocation: ${{ variables.apimResourceLocation }}
          apiVersion: ${{ variables.apiVersion }}
          appGatewayName: ${{ variables.appGatewayName }}
          appGatewayResourceGroup: ${{ variables.coreResourceGroup }}
          availabilityAlertDescription: ${{ variables.availabilityAlert_Description }}
          availabilityAlertGroups: ${{ variables.availabilityAlertGroups}}
          availabilityAlertName: ${{ variables.availabilityAlert_Name }}
          availabilityAlertPingFrequency: ${{ variables.availabilityAlert_PingFrequency }}
          availabilityAlertWindowSize: ${{ variables.availabilityAlert_WindowSize }}
          environmentName: ${{ variables.environmentName }}
          fullyQualifiedDomainName: ${{ variables.connectorServiceFQND }}
          groups: ${{ variables.groups }}
          healthEndpoint: ${{ variables.healthEndpoint }}
          productDescription: ${{ variables.productDescription }}
          productName: ${{ variables.productName }}
          resourceGroup: ${{ variables.resourceGroup }}
          serviceName: ${{ variables.connectorServiceName }}
          subscriptionName: ${{ variables.subscriptionName }}
          swaggerEndpoint: ${{ variables.swaggerEndpoint }}
- stage: Testing
  pool: AutomationTestAgentPool
  dependsOn: Swap_Slots
  jobs:
  - job: 'RegressionTests'
    timeoutInMinutes: ${{ variables.regressionTestTimeout }} # how long to run the job before automatically cancelling
    displayName: 'Regression Tests (Smoke Tests)'
    steps: 
      - checkout: ZurichTesting
      - template: pipelines\Templates\legal-home-regression-tests.yml@ZurichTesting
        parameters:
          environment: ${{ variables.environmentStorageName }}
          azureAdClientSecret: $(azureAdClientSecret)
          testTags: ${{ variables.regressionTestTags }}