# ASP.NET Core (.NET Framework)

# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
    - master

pool:
  vmImage: 'windows-latest'

resources:
  repositories:
    - repository: ZurichDeploy
      type: git
      name: Zurich.Deploy

variables:
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- template: Variables\ZurichDeploy-variables-Shared.yml@ZurichDeploy
- template: Variables\ZurichDeploy-variables-CI.yml@ZurichDeploy
- template: ../Variables/connector-variables-Shared.yml   
- template: ../Variables/connector-variables-CI.yml

stages:
- stage: Build
  jobs:
    - job: 'Build'
      displayName: 'Connectors Build'
      steps:
        - checkout: self
        - checkout: ZurichDeploy
        - template: Templates\ZurichDeploy-BuildWebAPI.yml@ZurichDeploy
          parameters:
            projectName: ${{ variables.projectName }}
- stage: CI
  pool: DCO-HighQ-Platform-N
  dependsOn:
     - Build
  jobs:
    - deployment: Prereqs
      environment: CI
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - checkout: ZurichDeploy
              - template: ../Templates/connector-prereqs.yml
                parameters:
                  appInsightsName: ${{ variables.appInsightsName }}
                  availabilityAlertGroups: ${{ variables.availabilityAlertGroups }}
                  azureAdClientId: ${{ variables.azureAdClientId }}
                  azureAdClientSecret: $(azureAdClientSecret)
                  developerActionGroupName: ${{ variables.developerActionGroupName }}
                  developerEmailAddress: ${{ variables.developerEmailAddress }}
                  developerEmailName: ${{ variables.developerEmailName }}
                  environmentName: ${{ variables.environmentName }}
                  environmentType: ${{ variables.environmentType }}
                  flowWebhook: ${{ variables.flowWebhook }}
                  flowWebhookName: ${{ variables.flowWebhookName }}
                  keyVault: ${{ variables.keyVault }}
                  keyVaultSubnets: ${{ variables.keyVaultSubnets }}
                  notificationEmailGroup: ${{ variables.notificationEmailGroup }}
                  resourceGroup: ${{ variables.resourceGroup }}
                  resourceLocation: ${{ variables.resourceLocation }}
                  resourceOwner: ${{ variables.resourceOwner }}
                  routeTableName: ${{ variables.routeTableName }}
                  connectorServiceName: ${{ variables.connectorServiceName }}
                  smartDetectionRuleNames: ${{ variables.smartDetectionRuleNames }}
                  subnetPreFix: ${{ variables.subnetPreFix }}
                  subnetConnectorBackend: ${{ variables.subnetConnectorBackend }}
                  subscriptionId: ${{ variables.subscriptionId }}
                  subscriptionName: ${{ variables.subscriptionName }}
                  tagNames: ${{ variables.tagNames }}
                  vnetName: ${{ variables.vnetName }}
                  vnetResourceGroup: ${{ variables.vnetResourceGroup }}
                  webDnsServer: ${{ variables.webDnsServer }}

    - deployment: Connector
      environment: CI
      dependsOn: Prereqs
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - checkout: ZurichDeploy
              - template: ../Templates/connector-deploy.yml
                parameters:
                  environmentName: ${{ variables.environmentName }}
                  keyVault: '${{ variables.keyVault }}'
                  projectName: '${{ variables.projectName }}'
                  resourceGroup: ${{ variables.resourceGroup }}
                  connectorServiceName: ${{ variables.connectorServiceName }}
                  slotName: ${{ variables.slotName}}
                  subscriptionName: ${{ variables.subscriptionName }}
- stage: Swap_Slots
  dependsOn: CI
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  jobs:
    - template: ../Templates/connector-swap-slots.yml
      parameters:
        environmentName: ${{ variables.environmentName }}
        resourceGroup: ${{ variables.resourceGroup }}
        connectorServiceName: ${{ variables.connectorServiceName }}
        slotName: ${{ variables.slotName }}
        subscriptionName: ${{ variables.subscriptionName }}
- stage: Update_APIM_Product
  dependsOn: Swap_Slots
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  jobs:
  - job: 'UpdateApim'
    displayName: 'Update Apim Connector Service'
    steps:
      - checkout: self
      - checkout: ZurichDeploy
      - template: Templates\ZurichDeploy-SetupApimProduct.yml@ZurichDeploy
        parameters:
          apiId: ${{ variables.apiId }}
          apimName: ${{ variables.apimName }}
          apimProductPolicyFilePath: $(Build.SourcesDirectory)/Zurich.Connector.Deploy/Config/${{parameters.environmentName}}/ConnectorAPIMPolicy.xml
          apimResourceGroup: ${{ variables.apimResourceGroup }}
          apiVersion: ${{ variables.apiVersion }}
          appGatewayName: ${{ variables.appGatewayName }}
          appGatewayResourceGroup: ${{ variables.coreResourceGroup }}
          environmentName: ${{ variables.environmentName }}
          fullyQualifiedDomainName: ${{ variables.connectorServiceFQND }}
          groups: ${{ variables.groups }}
          productDescription: ${{ variables.productDescription }}
          productName: ${{ variables.productName }}
          resourceGroup: ${{ variables.resourceGroup }}
          serviceName: ${{ variables.connectorServiceName }}
          subscriptionName: ${{ variables.subscriptionName }}
          swaggerEndpoint: ${{ variables.swaggerEndpoint }}